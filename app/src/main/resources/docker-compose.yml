services:
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    depends_on: [ zookeeper ]
    ports: [ 9092:9092 ]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://:9093,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_DELETE_TOPIC_ENABLED: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS_SEPARATOR: "$$'\n'"
      KAFKA_CREATE_TOPICS: |
        aap.aap-soknad-sendt.v1:1:1
        aap.medlem.v1:1:1
        aap.sokere.v1:1:1:compacted
    volumes: [ /var/run/docker.sock:/var/run/docker.sock ]

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports: [ 2181:2181 ]

  schema-registry:
    image: confluentinc/cp-schema-registry
    container_name: schema-registry
    restart: always
    depends_on: [ kafka, zookeeper ]
    ports: [ 8085:8085 ]
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9093
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8085

  mock-oauth2:
    image: ghcr.io/navikt/mock-oauth2-server:0.4.3
    ports: [ 8087:8081 ]
    expose: [ 8087 ]
    environment:
      SERVER_PORT: 8081
      JSON_CONFIG_PATH: /etc/oauth-mock-config.json
    volumes: [ './oauth-mock.json:/etc/oauth-mock-config.json' ]
